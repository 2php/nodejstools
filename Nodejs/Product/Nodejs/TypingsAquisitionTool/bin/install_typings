#!/usr/bin/env node
/**
    Tool to aquire typings used for NTVS IntelliSense.

    This is a simple wrapper around `typings-core`, with the main
    difference being that missing packages do not stop other typings
    from being aquired.
*/
"use strict";
var typings = require('typings-core');
var events = require('events');
var minimist = require('minimist');

/**
 * Create a promise that runs one or more promises sequentially.
 */
var runAll = function (promises) {
    return promises.reduce(function (p1, p2) {
        return p1.then(function (_) {
            return p2;
        });
    });
};

/**
 * Installs the typings for `packageName` with `options`.
 */
var installPackage = function (packageName, options) {
    return typings.installDependenciesRaw(["dt~" + packageName], options)
        .then(function () {
            console.log("Acqired typings for '" + packageName + "'");
        })
        .catch(function (e) {
            console.error("Could not acqire typings for '" + packageName + "'");
        });
};

/**
 * Installs the typings for the current project.
 */
var installForProject = function(options) {
    return typings.install(options)
     .then(function () {
            console.log("Acqired typings for project");
        })
        .catch(function (e) {
            console.error("Could not acqire typings for project");
        });
};



var argv = minimist(process.argv.slice(2), {
    boolean: ['save', 'verbose'],
    string: ['cwd']
});

var emitter = new events.EventEmitter();

var options = {
    save: argv.save,
    global: true,
    emitter: emitter,
    cwd: argv.cwd || process.cwd()
};

var packagesToInstall = argv._;

if (!packagesToInstall.length) { // top level package install
    installForProject(options)
} else {
    runAll(packagesToInstall.map(function (name) {
        return installPackage(name, options);
    }));
}
